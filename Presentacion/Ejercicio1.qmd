---
title: "Datos crudos a SNPs"
author: "Taller de análisis de datos genómicos"
format: 
    revealjs:
        theme: [default, ../style/custom.scss] 
        slide-number: c # mostrar solo el número de la diapositiva
        show-slide-number: all # mostrar la numeración para todas las vistas
        footer: "Reveal js Quarto" # pie de diapositiva
        menu: 
            side: left # mostrar menu de herramientas a la izquierda
        
---
## Flujo de trabajo

:::{style="width: 1100px; position: absolute; top: 30%; right: -10%"}
![](imagenes/etapas.png)
:::


## RADseq

:::{style="width: 500px; position: absolute; top: 0%; right: 20%"}
![](imagenes/radseq.png)
:::

::: footer
Archivos crudos
:::

## fastq

```{.bash}
zcat archivo.fastq.gz
```
Ejemplo:

```{.bash code-line-numbers="|1-4|1|2|3|4|"}
@A01335:226:HJH2MDRX2:1:2101:1081:1016 1:N:0:1
GNATTGTCGCTGCAGCTAGTATTGCTATCTGCTTAGCTATAGCTTTGGATTGGGCTTTTGTGGTATCACAAGCTTCCAAAAAAAAGTTTCCATCTCTATCAATGGAACACCCTTTCCAAATAACAATAAATA
+
F#FF,,:F,FFFFFF,,FF,:::F:FF::,F,,F,,F,F,F::,,::,:,FFFFF:FFF:F::FF,,F,FF:,,F:,F:,FFFF::,FFFF,::F:FF,:FF:,,FFFF,,FF,F,:FFFFFFFFFFFFFFF
@A01335:226:HJH2MDRX2:1:2101:1099:1016 1:N:0:1
TNCTTGCGCTTGCAGGTCCCTTTTGCTGTGACGAGACAGCCATCGCACCTGTTCCGATGTTTGTTATAGGGCTGTGTGCCGAAGTGTCCAAATGGCCCGTTGACATTCGCTGCACCACATACGCGTAGCTCA
+
F#FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,
```
<br>

:::{.small}
Encabezado: 
:::
```{.bash}
@<instrument>:<run number>:<flowcell ID>:<lane>:<tile>:<x-pos>:<y-pos> <read>:<is filtered>:<control number>:<sample number>
```


## Phred score
:::{.small}
Métrica utilizada para evaluar qué tanta confianza tenemos en la base designada en una secuencia. 

$$
Q = -10log10(e)
$$
:::

:::{.columns}
:::{.column width="40%" .small}
<br>

| Q   | Probabilidad de error | % de precisión |
| --- | --------------------- | -------------- |
| 10  | 1 en 10               | 90 %           |
| 20  | 1 en 100              | 99 %           |
| 30  | 1 en 1000             | 99.9%          |
| 40  | 1 en 10000            | 99.99%         |
:::
:::{.column width="60%"}
```{r}
#| warning: false
#| echo: false
#| fig-dpi: 300
#| fig-height: 6

library(ggplot2)
library(magrittr)
library(tidyr)

Q = seq(0,60,1)
P = 10^(-Q/10)
y = (1-P)*100

data.frame(accuracy = y, Q = Q, error = 100-y) %>% 
  pivot_longer(cols = c(accuracy,error), names_to = "var", values_to = "val")%>%
  ggplot(aes(x = Q, y = val, color = var))+
    geom_point()+
    geom_line()+
    scale_color_discrete(labels = c("Precisión","Error"))+
    theme_linedraw()+
    theme(text = element_text(size = 20))+
    labs(y = "Probabilidad %", x = "Q", color = "")
```
:::
:::

## Demultiplex
:::{style="width: 1300px; position: absolute; top: 30%; right: -18%"}
![](imagenes/demultiplex.png)
:::

::: footer
Demultiplex
:::

## Demultiplex

<br>
```{.bash code-line-numbers="|13|"}
input_dir=../data/raw_data/batch_01846
barcodes_file=../data/barcodes/barcodes_01846.txt

#mkdir ../data/demultiplexed_raw2/batch_01846

process_radtags -t 18 \ # número de núcleos
                -p $input_dir \
                -i gzfastq \
                -o ../data/demultiplexed_raw2/batch_01846 \
                -b $barcodes_file \
                --renz_1 pstI \ # enzima de restricción
                -r -c \
                --barcode-dist-1 2 \ # numero de discrepancias en el barcode
                -D \
                &>out_demultiplex_01846.log # una forma de guardar lo que se imprime en pantalla 

```

## barcode file

:::{style="position: absolute; top: 30%; right: 30%"}
```{.bash}
TCCGGAGCGC	ATZ01
CTAACACGGC	CUZ48
AGCTTCGATT	HUT68
TCGCCGCAAT	OAX73
TCAGTTCCGG	VC64
CGGAAGTGAG	LIPA01
GTTGCTAGAC	OLV04
AATAGATTCA	TRI08
AGCTGATACA	ATZ07
...
```
:::

## Demultiplex

```{.md code-line-numbers="false"}
Processing single-end data.
Using Phred+33 encoding for quality scores.
Found 1 input file(s).
Searching for single-end, inlined barcodes.
Loaded 96 barcodes (10bp).
Will attempt to recover barcodes with at most 2 mismatches.
Setting number of threads to 18; 1 reader thread; 4 writer threads; 13 worker threads.
Processing file 1 of 1 [Qins_2019004-01846.fastq.gz]
  Processing RAD-Tags...1M...2M...3M...4M...5M...6M...7M...8M...9M...10M...11M...
12M...13M...14M...15M...16M...17M...18M...19M...20M...21M...22M...23M...24M...25M...
26M...27M...28M...29M...30M...31M...32M...33M...34M...35M...36M...37M...38M...39M...
40M...41M...42M...43M...44M...45M...46M...47M...48M...49M...50M...51M...52M...53M...
54M...55M...56M...57M...58M...59M...60M...61M...62M...63M...64M...65M...66M...67M...
68M...69M...70M...71M...72M...73M...74M...75M...76M...77M...78M...79M...80M...81M...
...
...
561320480 total reads; -113381046 ambiguous barcodes; -7148939 ambiguous RAD-Tags; +12292198 recovered; -60222 low quality reads; 440730273 retained reads.
Closing files, flushing buffers...done.

561320480 total sequences
113381046 barcode not found drops (20.2%)
    60222 low quality read drops (0.0%)
  7148939 RAD cutsite not found drops (1.3%)
440730273 retained reads (78.5%)

```

## Revisión de calidad

![](imagenes/calidad.png)

## FastQC 
<br>

:::{.small}
1. Activamos el ambiente de conda que tiene instalado el software fastq 
:::
```{.bash}
conda activate quality
```
:::{.small}
2. Listar todos los archivos con terminación .gz. La opción -d permite enlistar rutas completas.
:::
```{.bash}
files=$(ls -d ../data/raw_data/morton_data/*.gz)
```
:::{.small}
3. Para cada archivo de la lista que creamos corre el programa fastq y escribe los resultados en el directorio escogido.
:::
```{.bash}
for file in $files
  do
    fastqc $file -o ../outputs/fastqc/morton_data/
done	
```
::: {.aside}
[Video Tutorial](https://www.youtube.com/watch?v=bz93ReOv87Y&ab_channel=BabrahamBioinf)
:::

## FastQScreen

:::{.small}
Paso 1. Descargar los genomas que sospechemos que pudieran estar presentes en nuestras muestras (Humano, Levadura, Ecoli, Quercus, etc.):


 ```{.bash}
 conda activate ncbi_datasets
 ```


Utilizando las herramientas de la linea de comandos de ncbi, descarga los genomas que vamos a poner a prueba


```{.bash}
# Metadatos de los genomas de referencia disponibles
datasets summary genome taxon 'E. coli' \ # entre las comillas se pueden poner nombres comunes o científicos
    --assembly-source refseq \ # (--reference) para ver genomas de referencia 
    --as-json-lines | dataformat tsv genome \
    --fields accession,assminfo-name,annotinfo-name,annotinfo-release-date,organism-name
```

:::{style="font-size: 18pt;"}
```{.bash code-line-numbers="false"}
Assembly Accession	Assembly Name	Annotation Name	Annotation Release Date	Organism Name
GCF_000008865.2	ASM886v2	Annotation submitted by GIRC	2021-02-12	Escherichia coli O157:H7 str. Sakai
GCF_000005845.2	ASM584v2	Annotation submitted by Univ. Wisconsin	2013-09-26	Escherichia coli str. K-12 substr. MG1655
```
:::


Descargar genoma


```{.bash}
datasets download genome accession GCF_000008865.2 \
 --reference \
 --include genome
```
:::
## 

:::{.small}
Paso 2. Indexar los genomas que vamos a poner a prueba con el paquete bowtie2

Activar ambiente de conda
```{.bash}
conda activate mapping
```
Index reference genomes to use fastq_screen

```{.bash}
cd ../data/genomes/ # ir a directorio donde están las carpetas de cada genoma
paths=$(ls -d $PWD/*) # enlistar todas las carpetas
```

Para cada carpeta:

- Enlista los archivos que terminan en .fna y guardalos en la variable file 
- Enlista los archivos que terminan en .fna, divide el nombre utilizando el . como separador y quedate con los pedazos 1 y 2
- Entra a la carpeta i 
- Genera un indice para el archivo (file) con el nombre que guardamos en la variable name 

```{.bash}
for i in $paths
  do
    file=$(ls -d $i/*.fna.gz)
    name=$(ls $i/*.fna.gz | cut -d . -f 1-2)
    cd $i
    bowtie2-build $file $name
done
```
:::

##
:::{.small}
Paso 3. Completar nuestro archivo de configuración `fastq_screen.conf` con las rutas de los programas y de los genomas. Nota: los genomas que queramos utilizar tienen que estar indexados. 

```{r}
#| echo: false
#| class: scrollable-chunk
cat(readLines('../inputs/fastq_screen/fastq_screen.conf'), sep = '\n')
```
:::

##

:::{.small}
Paso 4. Correr el programa para cada muestra y escribir los resultados en una carpeta del directorio "outputs"

```{.bash}
# Activamos el ambiente de conda que tiene instalado el software fastq
conda activate quality
# Listar todos los archivos con terminación .gz. La opción -d permite enlistar rutas completas.
files=$(ls -d ../data/raw_data/morton_data/*.gz)
fastq_screen --threads 10 --aligner bowtie2 --conf fastq_screen.conf $files --outdir ../outputs/fastq_screen/morton_data/
```
:::

## MultiQC

<br>

```{.bash}
## Directories
conda activate quality 

# Ruta del directorio donde están los resultados del fastqc
fastqc="../outputs/fastqc/morton_data/"

# Ruta del directorio donde están los resultados del fastq_screen
fastq_screen="../outputs/fastq_screen/morton_data/"

## Command
multiqc --force --interactive $fastqc $fastq_screen --outdir ../outputs/multiqc/morton_data/ 
```

::: aside
[Manual Multiqc](https://multiqc.info/docs/)
:::

## Alineamiento con un genoma de referencia 

1. Descargar genoma de referencia (ncbi_datasets)
2. Indexar el genoma de referencia con bwa

```{.bash}
# Activar el ambiente de conda donde tenemos bwa instalado 
conda activate aligner
# indexar genoma 
bwa index ../data/Qlobata/GCF_001633185.2_ValleyOak3.2/index/GCF_001633185.2_ValleyOak3.2_genomic.fna
```

##

3. Alinear cada muestra al genoma de referencia. 

```{.bash}
## Align to reference genome (Q.lobata) using BWA-MEM

######### read group file suffix
file_suffix="morton_data2"

######### input data directory
folder_data="../data/raw_data/morton_data/set2/"

######### output directories
out_folder="morton_data2"
mkdir -p ../data/alignment/sam/$out_folder
mkdir -p ../data/alignment/bam/$out_folder

while read sample readgroup
do
  echo "bwa mem -M -t 18 -R ${readgroup} ../data/genomes/qlobata/GCA_001633185.5_ValleyOak3.2_genomic.fna ${folder_data}/${sample}.fastq.gz > ../data/alignment/sam/${out_folder}/${sample}.sam" | bash

  picard SortSam I=../data/alignment/sam/${out_folder}/${sample}.sam O=../data/alignment/bam/${out_folder}/${sample}.bam SORT_ORDER=coordinate

  samtools index ../data/alignment/bam/${out_folder}/${sample}.bam

done < ../data/readgroups/sampl_rgp_${file_suffix}
```

## Llamado de SNPs

- [Manual stacks](https://catchenlab.life.illinois.edu/stacks/manual/)

- [Flujo de trabajo detallado con stacks](https://doi.org/10.1111/2041-210X.12775)

- [de novo](https://cran.r-project.org/web/packages/RADstackshelpR/vignettes/reproducible.vignette.html)

```{.bash}
# Activar ambiente de conda
conda activate stacks
```

The 2 steps performed in ref_map.pl are:

- gstacks which will identify SNPs within the meta population for each locus and then genotype each individual at each identified SNP. Once SNPs have been identified and genotyped, gstacks will phase the SNPs at each locus, in each individual, into a set of haplotypes

- populations which will will analyze a population of individual samples computing a number of population genetics statistics as well as exporting a variety of standard output formats. 

```{.bash}
out_dir="../data/vcf/unfiltered/stacks_output/all.90"
popmap="../data/sample_metadata/all_morton_popmap"
input_dir="../data/alignment/bam/all.90/"

mkdir -p $out_dir

ref_map.pl -o $out_dir -T 18 --popmap $popmap --samples $input_dir -X "populations:--ordered-export --vcf --phylip"
```
