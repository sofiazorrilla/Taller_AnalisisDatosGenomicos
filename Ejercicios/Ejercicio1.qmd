---
title: "Procesamiento bioinformático: demultiplex - llamado de SNPs"
format: 
    html:
        theme: [default, "../style/custom.scss"]
        page-layout: full
author: "Sergio y Sofía"
self-contained: true

#keep-md: true
---
Cambio 2
## Instalar miniconda en su usuario 

- Paso 1. Entrar a la siguiente liga `https://docs.conda.io/en/latest/miniconda.html`
- Paso 2. Descargar el script para el sistema operativo que necesiten. 
- Paso 3. Hacer ejecutable el script Miniconda3-...sh
- Paso 4. Ejecutar el script
- Paso 5. Seguir las instrucciones de instalación (aceptar los términos y condiciones, seleccionar ubicación de instalación y aceptar que inicie el programa cuando se abra una terminal)


Por ejemplo, para hacerlo desde la linea de comandos con la versión más reciente 

```{.bash}
# Ir a su home
cd ~

# Descargar el script para instalar la versión más reciente
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh 

# Hacer ejecutable el script
chmod +x Miniconda3-latest-Linux-x86_64.sh 

# Ejecutar el script
bash Miniconda3-latest-Linux-x86_64.sh 

# Opcional: evitar que conda inicie automaticamente al abrir una terminal 
conda config --set auto_activate_base false

```


## Demultiplex

### process_radtags

STACKS tool process_radtags which:

> ... checks that the barcode and the RAD cutsite are intact, and demultiplexes the data. If there are errors in the barcode or the RAD site within a certain allowance process_radtags can correct them. Second, it slides a window down the length of the read and checks the average quality score within the window. If the score drops below 90% probability of being correct (a raw phred score of 10), the read is discarded. This allows for some seqeuncing errors while elimating reads where the sequence is degrading as it is being sequenced.

- [Manual](https://catchenlab.life.illinois.edu/stacks/comp/process_radtags.php)
- script: `process_radtags.sh`

Parameters:
- `-p` we indicate the directory with the sequence data
- `-i` the type of sequence file
- `-o` the output directory
- `-y` the output format
- `-b` the barcode file to use for demultiplexing
- `-e` the restriction enzyme so it knows what cut site sequence to expect after the barcode
- `--adapter_1` to indicate the adapter sequence to identify and remove contaminants
- `--adapter_mm` the number of mismatches allowed between the read and real adapter sequence
- `-r` to "rescue" (keep) a sequence if there is one error in the barcode
- `-c` to remove reads with uncalled bases (N)
- `-q` to discard reads with low quality scores which are defined by a sliding window if the average score is less than `-s` = 10.

```{.bash}

input_dir=../data/raw_data/batch_01846
barcodes_file=../data/barcodes/barcodes_01846.txt

#mkdir ../data/demultiplexed_raw2/batch_01846

process_radtags -t 18 \ # número de núcleos
                -p $input_dir \
                -i gzfastq \
                -o ../data/demultiplexed_raw2/batch_01846 \
                -b $barcodes_file \
                --renz_1 pstI \ # enzima de restricción
                -r -c \
                --barcode-dist-1 2 \ # numero de discrepancias en el barcode
                -D \
                &>out_demultiplex_01846.log # una forma de guardar lo que se imprime en pantalla 
```


## Revisión de calidad



### FastQ

[Video Tutorial](https://www.youtube.com/watch?v=bz93ReOv87Y&ab_channel=BabrahamBioinf)

Paso 1. Correr el programa para cada muestra y escribir los resultados en una carpeta del directorio "outputs"

```{.bash}
# Activamos el ambiente de conda que tiene instalado el software fastq
conda activate quality

# Listar todos los archivos con terminación .gz. La opción -d permite enlistar rutas completas.
files=$(ls -d ../data/raw_data/morton_data/*.gz)

# Para cada archivo de la lista que creamos corre el programa fastq y escribe los resultados en el directorio escogido.
for file in $files
do
fastqc $file -o ../outputs/fastqc/morton_data/
done	

```

### FastQC

[Documentación](https://www.bioinformatics.babraham.ac.uk/projects/fastq_screen/_build/html/index.html)

Paso 1. Descargar los genomas que sospechemos que pudieran estar presentes en nuestras muestras (Humano, Levadura, Ecoli, Quercus, etc.):

- Hacer un ambiente de conda e instalar las herramientas de linea de comandos de NCBI 
 
 ```{.bash}
 conda create -n ncbi_datasets -c conda-forge ncbi-datasets-cli
 
 ```

- Utilizando las herramientas de la linea de comandos de ncbi, descarga los genomas que vamos a poner a prueba

```{.bash}
# activar ambiente de conda
conda activate ncbi_datasets

# Metadatos de los genomas de referencia disponibles
datasets summary genome taxon 'E. coli' \ # entre las comillas se pueden poner nombres comunes o científicos
    --assembly-source refseq \ # (--reference) para ver genomas de referencia 
    --as-json-lines | dataformat tsv genome \
    --fields accession,assminfo-name,annotinfo-name,annotinfo-release-date,organism-name


Assembly Accession	Assembly Name	Annotation Name	Annotation Release Date	Organism Name
GCF_000008865.2	ASM886v2	Annotation submitted by GIRC	2021-02-12	Escherichia coli O157:H7 str. Sakai
GCF_000005845.2	ASM584v2	Annotation submitted by Univ. Wisconsin	2013-09-26	Escherichia coli str. K-12 substr. MG1655


# Descargar genoma

datasets download genome accession GCF_000008865.2 --reference --include genome

```

- Indexar los genomas que vamos a poner a prueba con el paquete bowtie2

```{.bash}
#Activar ambiente de conda
conda activate mapping


# index reference genomes to use fastq_screen

cd ../data/genomes/ # ir a directorio donde están las carpetas de cada genoma

paths=$(ls -d $PWD/*) # enlistar todas las carpetas

# Para cada carpeta:
## 1. Enlista los archivos que terminan en .fna y guardalos en la variable file 
## 2. Enlista los archivos que terminan en .fna, divide el nombre utilizando el . como separador y quedate con los pedazos 1 y 2
## 3. Entra a la carpeta i 
## 4. Genera un indice para el archivo (file) con el nombre que guardamos en la variable name 

for i in $paths
do
    file=$(ls -d $i/*.fna.gz)
    name=$(ls $i/*.fna.gz | cut -d . -f 1-2)
    cd $i
    bowtie2-build $file $name
done
```

Paso 2. Completar nuestro archivo de configuración `fastq_screen.conf` con las rutas de los programas y de los genomas. Nota: los genomas que queramos utilizar tienen que estar indexados. 

```{r}
#| echo: false
#| class: scrollable-chunk
#| 
cat(readLines('../inputs/fastq_screen/fastq_screen.conf'), sep = '\n')
```
<br>

Paso 3. Correr el programa para cada muestra y escribir los resultados en una carpeta del directorio "outputs"

```{.bash}
# Activamos el ambiente de conda que tiene instalado el software fastq
conda activate quality

# Listar todos los archivos con terminación .gz. La opción -d permite enlistar rutas completas.
files=$(ls -d ../data/raw_data/morton_data/*.gz)

fastq_screen --threads 10 --aligner bowtie2 --conf fastq_screen.conf $files --outdir ../outputs/fastq_screen/morton_data/

```

### MultiQC - Resumen general

[Manual Multiqc](https://multiqc.info/docs/)

```{.bash}

## Directories
conda activate quality 

# Ruta del directorio donde están los resultados del fastqc
fastqc="../outputs/fastqc/morton_data/"

# Ruta del directorio donde están los resultados del fastq_screen
fastq_screen="../outputs/fastq_screen/morton_data/"

## Command

multiqc --force --interactive $fastqc $fastq_screen --outdir ../outputs/multiqc/morton_data/ 

```


## Mapeo a un genoma de referencia


After initial quality and contamination assesment. Next step is to performe an aligment to a reference genome (in case there is one available,
otherwise a _de Novo_ aligment and variant callig pipeline has to be used). Further trimming and quality chechs can be evaluated by looking at their
effect on the mapping statistics.

1. First the reference genome has to be downloaded. See the previous section for short instructions. The reference
needs to be in a fasta format (.fna is fasta format when sequences are downloaded form NCBI).

2. Después, se tiene que indexar el genoma de referencia. 

```{.bash}

# Activar el ambiente de conda donde tenemos bwa instalado 
conda activate aligner

# indexar genoma 
bwa index ../data/Qlobata/GCF_001633185.2_ValleyOak3.2/index/GCF_001633185.2_ValleyOak3.2_genomic.fna

```

3. Una consideración importante en este punto es qué algoritmo vamos a utilizar para llamar SNPs más adelante. Si vamos a utilizar GATK, entonces es importante añadir información acerca del "readgroup" a cada muestra. El programa va a utilizar esta información durante el cálculo de probabilidades de un haplotipo, genotipo y SNPs

- [Artículo sobre readgroups](https://gatk.broadinstitute.org/hc/en-us/articles/360035890671-Read-groups)
- [Script](../inputs/alignment/rgp.sh) personalizado para hacer la lista de readgroups


4. Finalmente podemos alinear cada muestra al genoma de referencia. 

```{.bash}
## Align to reference genome (Q.lobata) using BWA-MEM

######### read group file suffix

file_suffix="morton_data2"


######### input data directory

folder_data="../data/raw_data/morton_data/set2/"

######### output directories

out_folder="morton_data2"

mkdir -p ../data/alignment/sam/$out_folder
mkdir -p ../data/alignment/bam/$out_folder

while read sample readgroup
do

echo "bwa mem -M -t 18 -R ${readgroup} ../data/genomes/qlobata/GCA_001633185.5_ValleyOak3.2_genomic.fna ${folder_data}/${sample}.fastq.gz > ../data/alignment/sam/${out_folder}/${sample}.sam" | bash

picard SortSam I=../data/alignment/sam/${out_folder}/${sample}.sam O=../data/alignment/bam/${out_folder}/${sample}.bam SORT_ORDER=coordinate

samtools index ../data/alignment/bam/${out_folder}/${sample}.bam

done < ../data/readgroups/sampl_rgp_${file_suffix}
```


## Llamado de SNPs

- [Manual stacks](https://catchenlab.life.illinois.edu/stacks/manual/)

- [Flujo de trabajo detallado con stacks](https://doi.org/10.1111/2041-210X.12775)
- [de novo](https://cran.r-project.org/web/packages/RADstackshelpR/vignettes/reproducible.vignette.html)

```{.bash}
# Activar ambiente de conda
conda activate stacks

## The 2 steps performed in ref_map.pl are:

### gstacks which will identify SNPs within the meta population for each locus and then genotype each individual at each identified SNP. Once SNPs have been identified and genotyped, gstacks will phase the SNPs at each locus, in each individual, into a set of haplotypes

### populations which will will analyze a population of individual samples computing a number of population genetics statistics as well as exporting a variety of standard output formats. 

out_dir="../data/vcf/unfiltered/stacks_output/all.90"
popmap="../data/sample_metadata/all_morton_popmap"
input_dir="../data/alignment/bam/all.90/"

mkdir -p $out_dir

ref_map.pl -o $out_dir -T 18 --popmap $popmap --samples $input_dir -X "populations:--ordered-export --vcf --phylip"
```